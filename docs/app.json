[{"name":"app.R","content":"library(tidyverse)\r\nlibrary(ggplot2)\r\nlibrary(DT)\r\nlibrary(shiny)\r\nlibrary(glue)\r\nlibrary(WriteXLS)\r\n\r\n## source application files\r\n#source(\"global.R\", local = TRUE)\r\n\r\n\r\nui <- fluidPage(\r\n sidebarLayout(\r\n  sidebarPanel(\r\n   tags$h3(\"Project Gantt Chart\"),\r\n   tags$h4(\"Add or remove as many tasks as you like for a single project.\"),\r\n   tags$hr(),\r\n   textInput(inputId = \"projectName\", label = \"Project Name:\", placeholder = \"e.g., My Project\"),\r\n   textInput(inputId = \"inTaskName\", label = \"Task:\", placeholder = \"e.g., Extract and Link Data\"),\r\n   dateInput(inputId = \"inStartDate\", value = Sys.Date(), min = Sys.Date() - 365, label = \"Start Date:\"),\r\n   dateInput(inputId = \"inEndDate\", value = Sys.Date() + 10, min = Sys.Date() - 364, label = \"End Date:\"),\r\n   actionButton(inputId = \"btn\", label = \"Add Task\")\r\n  ),\r\n  mainPanel(\r\n   tags$h3(\"Task Table View\"),\r\n   tags$hr(),\r\n   DTOutput(outputId = \"tableTasks\"),\r\n   downloadButton(\"downloadExcel\", \"Download Table as Excel\"),\r\n   tags$h3(\"Gantt Chart\"),\r\n   tags$h4(\"Right-click the Gantt chart to copy or save as image.\"),\r\n   tags$hr(),\r\n   plotOutput(outputId = \"plotTasks\")\r\n  )\r\n )\r\n)\r\n\r\n\r\nserver <- function(input, output) {\r\n df <- reactiveValues(\r\n  data = data.frame(\r\n   Task = c(\"Task 1\", \"Task 2\"),\r\n   StartDate = as.Date(c(\"2023-10-10\", \"2023-10-30\")),\r\n   EndDate = as.Date(c(\"2023-11-30\", \"2023-12-15\"))\r\n  ) %>%\r\n   # Add an ID column - used later to remove row with certain ID\r\n   mutate(ID = row_number(), .before = Task) %>%\r\n   # Add a column with a custom Remove button\r\n   mutate(Remove = glue('<button id=\"custom_btn_{ID}\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{ID}\\')\">Remove<\/button>'))\r\n  \r\n )\r\n \r\n observeEvent(input$btn, {\r\n  task_name <- input$inTaskName\r\n  task_start_date <- input$inStartDate\r\n  task_end_date <- input$inEndDate\r\n  \r\n  if (!is.null(task_name) && !is.null(task_start_date) && !is.null(task_end_date)) {\r\n   # We also need a new row ID\r\n   new_id <- nrow(df$data) + 1\r\n   new_row <- data.frame(\r\n    # Row ID\r\n    ID = new_id,\r\n    Task = task_name,\r\n    StartDate = task_start_date,\r\n    EndDate = task_end_date,\r\n    # Remove button with a unique timestamp ID\r\n    Remove = glue('<button id=\"custom_btn\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{new_id}_', Sys.time(), '\\')\">Remove<\/button>'),\r\n    stringsAsFactors = FALSE\r\n   )\r\n   df$data <- rbind(df$data, new_row)\r\n   df$data <- df$data[order(df$data$ID), ]\r\n  }\r\n })\r\n \r\n # REMOVE A TASK\r\n observeEvent(input$button_id, {\r\n  # Extract the actual ID from the combined ID_timestamp\r\n  actual_id <- unlist(strsplit(input$button_id, \"_\"))[1]\r\n  \r\n  # Remove a row from the data.frame\r\n  df$data <- df$data[-c(as.integer(actual_id)), ]\r\n  \r\n  # Renumber the IDs\r\n  df$data$ID <- seq_len(nrow(df$data))\r\n  \r\n  # Sort the dataframe by StartDate\r\n  df$data <- df$data[order(df$data$StartDate), ]\r\n  \r\n  # Reset row names\r\n  rownames(df$data) <- NULL\r\n  \r\n  # Update the Remove buttons to reflect new IDs with a unique timestamp\r\n  df$data$Remove <- sapply(df$data$ID, function(i) {\r\n   glue('<button id=\"custom_btn_{i}\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{i}_', Sys.time(), '\\')\">Remove<\/button>')\r\n  })\r\n })\r\n \r\n \r\n \r\n output$tableTasks <- renderDT({\r\n  datatable(data = df$data, escape = FALSE, caption = input$projectName)\r\n })\r\n \r\n output$plotTasks <- renderPlot({\r\n  ggplot(df$data, aes(x = StartDate, xend = EndDate, y = fct_rev(fct_inorder(Task)), yend = Task)) +\r\n   geom_segment(linewidth = 10, color = \"#0198f9\") +\r\n   labs(\r\n    title = input$projectName,\r\n    x = \"Duration\",\r\n    y = \"Task\"\r\n   ) +\r\n   theme_bw() +\r\n   theme(legend.position = \"none\") +\r\n   theme(\r\n    plot.title = element_text(size = 20),\r\n    axis.text.x = element_text(size = 14),\r\n    axis.text.y = element_text(size = 14)\r\n   )\r\n })\r\n \r\n \r\n output$downloadExcel <- downloadHandler(\r\n  filename = function() {\r\n   paste(\"TaskData-\", Sys.Date(), \".xlsx\", sep=\"\")\r\n  },\r\n  content = function(file) {\r\n   write_xlsx(df$data, path = file)\r\n  }\r\n )\r\n \r\n}\r\n\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"}]
